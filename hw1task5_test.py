import Task_5
import unittest
from io import StringIO
from unittest.mock import patch
from random import choice

class TestMainFunction(unittest.TestCase):
    
    @patch('builtins.input', side_effect=["3", "4"])
    def test_main_input_calls(self, mock_input):
        Task_5.main() 
        expected_calls = ["Enter a: ", "Enter b: "]
        # Check if input was called with the expected arguments
        self.assertEqual(mock_input.call_args_list, [unittest.mock.call(arg) for arg in expected_calls])

    def _test_with_input(self, input_value, expected_output):
        with patch('builtins.input', side_effect=input_value), \
             patch('sys.stdout', new_callable=StringIO) as mock_stdout:
            Task_5.main()
        self.assertEqual(mock_stdout.getvalue(), expected_output)
 
    def test_input(self):
        data = [[5, 1, 6, 4, 5, 0, 5, 5, '0.70'], [5, 1, 6, 4, 5, 0, 5, 5, '0.70'], [5, 1, 6, 4, 5, 0, 5, 5, '0.70'], [5, 1, 6, 4, 5, 0, 5, 5, '0.70'], [5, 1, 6, 4, 5, 0, 5, 5, '0.70'], [5, 1, 6, 4, 5, 0, 5, 5, '0.70'], [5, 1, 6, 4, 5, 0, 5, 5, '0.70'], [5, 1, 6, 4, 5, 0, 5, 5, '0.70'], [5, 1, 6, 4, 5, 0, 5, 5, '0.70'], [5, 1, 6, 4, 5, 0, 5, 5, '0.70'], [5, 1, 6, 4, 5, 0, 5, 5, '0.70'], [5, 1, 6, 4, 5, 0, 5, 5, '0.70'], [5, 1, 6, 4, 5, 0, 5, 5, '0.70'], [5, 1, 6, 4, 5, 0, 5, 5, '0.70'], [5, 1, 6, 4, 5, 0, 5, 5, '0.70'], [5, 1, 6, 4, 5, 0, 5, 5, '0.70'], [5, 1, 6, 4, 5, 0, 5, 5, '0.70'], [5, 1, 6, 4, 5, 0, 5, 5, '0.70'], [5, 1, 6, 4, 5, 0, 5, 5, '0.70'], [5, 1, 6, 4, 5, 0, 5, 5, '0.70'], [5, 1, 6, 4, 5, 0, 5, 5, '0.70'], [5, 1, 6, 4, 5, 0, 5, 5, '0.70'], [5, 1, 6, 4, 5, 0, 5, 5, '0.70'], [5, 1, 6, 4, 5, 0, 5, 5, '0.70'], [5, 1, 6, 4, 5, 0, 5, 5, '0.70'], [5, 1, 6, 4, 5, 0, 5, 5, '0.70'], [5, 1, 6, 4, 5, 0, 5, 5, '0.70'], [5, 1, 6, 4, 5, 0, 5, 5, '0.70'], [5, 1, 6, 4, 5, 0, 5, 5, '0.70'], [5, 1, 6, 4, 5, 0, 5, 5, '0.70'], [5, 1, 6, 4, 5, 0, 5, 5, '0.70'], [5, 1, 6, 4, 5, 0, 5, 5, '0.70'], [5, 1, 6, 4, 5, 0, 5, 5, '0.70'], [5, 1, 6, 4, 5, 0, 5, 5, '0.70'], [5, 1, 6, 4, 5, 0, 5, 5, '0.70'], [5, 1, 6, 4, 5, 0, 5, 5, '0.70'], [5, 1, 6, 4, 5, 0, 5, 5, '0.70'], [5, 1, 6, 4, 5, 0, 5, 5, '0.70'], [5, 1, 6, 4, 5, 0, 5, 5, '0.70'], [5, 1, 6, 4, 5, 0, 5, 5, '0.70'], [5, 1, 6, 4, 5, 0, 5, 5, '0.70'], [5, 1, 6, 4, 5, 0, 5, 5, '0.70'], [5, 1, 6, 4, 5, 0, 5, 5, '0.70'], [5, 1, 6, 4, 5, 0, 5, 5, '0.70'], [5, 1, 6, 4, 5, 0, 5, 5, '0.70'], [5, 1, 6, 4, 5, 0, 5, 5, '0.70'], [5, 1, 6, 4, 5, 0, 5, 5, '0.70'], [5, 1, 6, 4, 5, 0, 5, 5, '0.70'], [5, 1, 6, 4, 5, 0, 5, 5, '0.70'], [5, 1, 6, 4, 5, 0, 5, 5, '0.70'], [5, 1, 6, 4, 5, 0, 5, 5, '0.70'], [5, 1, 6, 4, 5, 0, 5, 5, '0.70'], [5, 1, 6, 4, 5, 0, 5, 5, '0.70'], [5, 1, 6, 4, 5, 0, 5, 5, '0.70'], [5, 1, 6, 4, 5, 0, 5, 5, '0.70'], [5, 1, 6, 4, 5, 0, 5, 5, '0.70'], [5, 1, 6, 4, 5, 0, 5, 5, '0.70'], [5, 1, 6, 4, 5, 0, 5, 5, '0.70'], [5, 1, 6, 4, 5, 0, 5, 5, '0.70'], [5, 1, 6, 4, 5, 0, 5, 5, '0.70'], [5, 1, 6, 4, 5, 0, 5, 5, '0.70'], [5, 1, 6, 4, 5, 0, 5, 5, '0.70'], [5, 1, 6, 4, 5, 0, 5, 5, '0.70'], [5, 1, 6, 4, 5, 0, 5, 5, '0.70'], [5, 1, 6, 4, 5, 0, 5, 5, '0.70'], [5, 1, 6, 4, 5, 0, 5, 5, '0.70'], [5, 1, 6, 4, 5, 0, 5, 5, '0.70'], [5, 1, 6, 4, 5, 0, 5, 5, '0.70'], [5, 1, 6, 4, 5, 0, 5, 5, '0.70'], [5, 1, 6, 4, 5, 0, 5, 5, '0.70'], [5, 1, 6, 4, 5, 0, 5, 5, '0.70'], [5, 1, 6, 4, 5, 0, 5, 5, '0.70'], [5, 1, 6, 4, 5, 0, 5, 5, '0.70'], [5, 1, 6, 4, 5, 0, 5, 5, '0.70'], [5, 1, 6, 4, 5, 0, 5, 5, '0.70'], [5, 1, 6, 4, 5, 0, 5, 5, '0.70'], [5, 1, 6, 4, 5, 0, 5, 5, '0.70'], [5, 1, 6, 4, 5, 0, 5, 5, '0.70'], [5, 1, 6, 4, 5, 0, 5, 5, '0.70'], [5, 1, 6, 4, 5, 0, 5, 5, '0.70'], [5, 1, 6, 4, 5, 0, 5, 5, '0.70'], [5, 1, 6, 4, 5, 0, 5, 5, '0.70'], [5, 1, 6, 4, 5, 0, 5, 5, '0.70'], [5, 1, 6, 4, 5, 0, 5, 5, '0.70'], [5, 1, 6, 4, 5, 0, 5, 5, '0.70'], [5, 1, 6, 4, 5, 0, 5, 5, '0.70'], [5, 1, 6, 4, 5, 0, 5, 5, '0.70'], [5, 1, 6, 4, 5, 0, 5, 5, '0.70'], [5, 1, 6, 4, 5, 0, 5, 5, '0.70'], [5, 1, 6, 4, 5, 0, 5, 5, '0.70'], [5, 1, 6, 4, 5, 0, 5, 5, '0.70'], [5, 1, 6, 4, 5, 0, 5, 5, '0.70'], [5, 1, 6, 4, 5, 0, 5, 5, '0.70'], [5, 1, 6, 4, 5, 0, 5, 5, '0.70'], [5, 1, 6, 4, 5, 0, 5, 5, '0.70'], [5, 1, 6, 4, 5, 0, 5, 5, '0.70'], [5, 1, 6, 4, 5, 0, 5, 5, '0.70'], [5, 1, 6, 4, 5, 0, 5, 5, '0.70'], [5, 1, 6, 4, 5, 0, 5, 5, '0.70'], [5, 1, 6, 4, 5, 0, 5, 5, '0.70']]
        sample = choice(list(data))
        expected_output = f"{sample[0]} + {sample[1]} = {sample[2]}\n" \
                            f"{sample[0]} - {sample[1]} = {sample[3]}\n"\
                            f"{sample[0]} * {sample[1]} = {sample[4]}\n" \
                            f"{sample[0]} % {sample[1]} = {sample[5]}\n" \
                            f"{sample[0]} // {sample[1]} = {sample[6]}\n" \
                            f"{sample[0]} ** {sample[1]} = {sample[7]}\n" \
                            f"log10( {sample[0]} ) = {float(sample[8]):.2f}\n" 
        self._test_with_input(sample[:2], expected_output)

    def test_invalid_input(self):
        with patch('builtins.input', side_effect=["a", "b", "c"]), \
             self.assertRaises(ValueError):
            Task_5.main()
